{"error":0,"message":null,"data":{"core":"3.9.40","link":null,"vulnerability":[{"name":"3.9.40","description":null,"source":[{"id":"CVE-2022-43504","name":"CVE-2022-43504","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43504","description":"Improper authentication vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to obtain the email address of the user who posted a blog using the WordPress Post by Email Feature. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:L\/I:N\/A:N","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"l","i":"n","a":"n","score":"5.3","severity":"m","exploitable":"3.9","impact":"1.4"},"cwe":[{"cwe":"CWE-287","name":"Improper Authentication","description":"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct."}]}},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2022-43500","name":"CVE-2022-43500","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43500","description":"Cross-site scripting vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to inject an arbitrary script. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"n","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"6.1","severity":"m","exploitable":"2.8","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2022-43497","name":"CVE-2022-43497","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43497","description":"Cross-site scripting vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to inject an arbitrary script. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"n","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"6.1","severity":"m","exploitable":"2.8","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"3.9.40","description":null,"source":[{"id":"78cb0ca6db616fea2d602146ff644e60b6f952a9","name":"WordPress Core &lt; 6.0.3 - Shared User Instance Weakness","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-shared-user-instance-weakness","description":"WordPress Core in versions up to 6.0.3 had a weakness in how Share User Instances were handled. This fix appears to have been necessary to safely use the wp_set_current_user( 0 ); method to patch the previously mentioned XSS and CSRF in wp-mail.php and wp-trackback.php vulnerabilities. The previous functionality may have resulted in third party plugins or themes using the wp_set_current_user function in a way that could lead to privilege escalation and users being able to perform more actions than originally intended.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"2e4c185cddfe91117267695bf876b39f965ae54c","name":"WordPress Core &lt; 6.0.3 - Open Redirect","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-open-redirect","description":"WordPress Core is vulnerable to open redirect in versions up to 6.0.3. This is due to insufficient validation of the &#039;Referer&#039; header and _wp_http_referer request parameter when a user accesses a link with an expired or invalid nonce. This would make it possible for an attacker to redirect a victim to a potentially malicious site, granted they could trick the victim into performing an action such as clicking on a link.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"190fc0bb9fef5e631087ea153589b8a8a6f90960","name":"WordPress Core &lt; 6.0.3 - Information Disclosure (Multi-Part Email Leak)","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-information-disclosure-multi-part-email-leak","description":"WordPress Core is vulnerable to information disclosure via a REST-API endpoint in versions up to 6.0.3. The endpoint for terms and tags did not perform enough validation on the user requesting information about terms and tags for a given post. This made it possible for users with access to terms and tags, such as a contributor, to determine those details on all posts not belonging to them, even when in a private status. This does not reveal critical information, and as such it is not likely to be exploited.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"965a319b01a13c6eead339996178eb24e2e0d491","name":"WordPress Core &lt; 6.0.3 - Authenticated (Admin+) Stored Cross-Site Scripting via Customizer","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-admin-stored-cross-site-scripting-via-customizer","description":"WordPress Core is vulnerable to Stored Cross-Site Scripting via the Customizer in versions up to 6.0.3. This is due to insufficient escaping on the &#039;Blog Name&#039; value that could be edited and become executable with the right payload while in the theme customizer. This would make it possible for authenticated attacker with access to customize a theme, such as administrators to inject malicious JavaScript into the page.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"c9323f64fe9af6b7bd7edb0c979a9855fb13e098","name":"WordPress Core &lt; 6.0.3 - Authenticated Information Disclosure via REST-API","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-information-disclosure-via-rest-api","description":"WordPress Core is vulnerable to information disclosure via the REST-API in versions up to 6.0.3. The REST API endpoint for terms and tags did not perform enough validation on the user requesting information about terms and tags for a given post. This made it possible for users with access to terms and tags, such as a contributor, to determine those details on all posts not belonging to them, even when in a private status. This does not reveal critical information.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"63b392aea1c1b4bc1361601b817a44bafe763b06","name":"WordPress Core &lt; 6.0.3 - Reflected Cross-Site Scripting via SQL Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-reflected-cross-site-scripting-via-sql-injection","description":"WordPress Core is vulnerable to SQL Injection in the Media Library that can be leveraged to exploit a Reflected Cross-Site Scripting issue in versions up to 6.0.3. This is due to insufficient escaping on user supplied values passed to a SQL query.  This makes it possible for an attacker to achieved JavaScript code execution in a victims browser, granted they can trick the victim into performing an action such as clicking on a link.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"9ee0cd84d77b81697234ae7dc17da7bdc5cf4e78","name":"WordPress Core &lt; 6.0.3 - Cross-Site Request Forgery via wp-trackback.php","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-cross-site-request-forgery-via-wp-trackbackphp","description":"WordPress Core is vulnerable to Cross-Site Request Forgery via wp-trackback.php in versions up to 6.0.3. This is due to the fact that the any request to wp-trackback.php would assume the identity of the user whose cookies are sent with the request. This would make it possible for an unauthenticated user to trigger a trackback assuming the identity of another user, granted they could trick that other user into performing the action. In new versions of WordPress, the identity will always be a non-existent user with the ID of 0, which represents an unauthenticated user.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"9abbc1eef7432ddae819cebac05eda27f8968cb7","name":"WordPress Core &lt; 6.0.3 - Information Disclosure (Email Address)","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-information-disclosure-email-address","description":"WordPress Core is vulnerable to Information Disclosure of in versions up to 6.0.3. When the post by email functionality is enabled, it may log post author&#039;s email addresses in a way that may be publicly accessible. This could make it possible for attackers to steal post author&#039;s email addresses and use that for further attacks.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"c090fb8976cdf06fe4a784b26e31a994810574e6","name":"WordPress Core &lt; 6.0.3 - Authenticated (Editor+) Stored Cross-Site Scripting via Comments","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-editor-stored-cross-site-scripting-via-comments","description":"WordPress Core is vulnerable to Stored Cross-Site Scripting, exploitable during comment editing, in versions up to 6.0.3. This is due to insufficient escaping and sanitization on the values being stored during a comment update. This makes it possible for authenticated users with high level permissions, such as an editor, to modify post comments to include malicious web scripts that will execute whenever someone accesses the comment.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"3125d7e18248788cbd9188f71d414ec4bb93250e","name":"WordPress Core &lt; 6.0.3 - SQL Injection via WP_Date_Query","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-sql-injection-via-wp-date-query","description":"WordPress Core is vulnerable to SQL Injection in versions up to 6.0.3. This is due to insufficient escaping on where &ldquo;AND&rdquo; and &ldquo;OR&rdquo; present in the query. This may make it possible for attackers to achieve SQL Injection when another plugin or theme is installed on the site that allows WP_Date_Query to be used insecurely.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"444b0c4cd5f7625ac90487b84c538374100a3f9e","name":"WordPress Core &lt; 6.0.2 - Authenticated SQL Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-authenticated-sql-injection","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to SQL Injection that can be exploited by authenticated users via the LIMIT parameter passed through the get_bookmarks function. This can be exploited on default WordPress installations by users with high-level privileges, such as an editor or administrator, and it may be possible for this to be exploited by lower-privileged users if a plugin\/theme passes an unescaped user supplied LIMIT value from those level users to the get_bookmarks function.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"6d4e711f6c8b6ee331f0b1e73a4a2bd0e0ae11d2","name":"WordPress Core &lt; 6.0.2 - Stored Cross-Site Scripting via Plugin Deactivation and Deletion Errors","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-stored-cross-site-scripting-via-plugin-deactivation-and-deletion-errors","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to Stored Cross-Site Scripting that can be exploited when malicious content is injected into plugin code that triggers when an error occurs during plugin de-activation or during deletion. This requires an attacker have access to the modify the error message that is displayed either in the plugin&#039;s code or via a request parameter, in most cases it is likely to be the latter.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"ff2eea71b936176aa8dfa6a17182149fc32c1dac","name":"WordPress Core &lt; 6.0.2 - Authenticated (Contributor+) Stored Cross-Site Scripting via use of the_meta(); function","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-authenticated-contributor-stored-cross-site-scripting-via-use-of-the-meta-function","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to Authenticated Stored Cross-Site Scripting that can be exploited by users with access to the WordPress post and page editor, typically consisting of Authors, Contributors, and Editors making it possible to inject arbitrary web scripts into posts and pages that execute if the the_meta(); function is called on that page.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"f44964d4862c0c3f4c61975fa84be6aff69e1b26","name":"WordPress Core 5.9 - 5.9.1 - Authenticated (Contributor+) Stored Cross-Site Scripting","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-59-591-authenticated-contributor-stored-cross-site-scripting","description":"WordPress Core in versions 5.9 - 5.9.1 is vulnerable to Contributor+ stored Cross-Site Scripting via the double JSON encoded payloads set in the &#039;isGlobalStylesUserThemeJSON&#039; parameter which is updatable via the post editor.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2021-20083","name":"CVE-2021-20083","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-20083","description":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype.","date":"2021-04-23"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"l","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"8.8","severity":"h","exploitable":"2.8","impact":"5.9"},"cwe":[{"cwe":"CWE-1321","name":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","description":"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."}]}},{"name":"3.9.40","description":null,"source":[{"id":"d4c9b79e9b5d7710ce593a44669702750ee3e41a","name":"WordPress Core &lt; 5.9.1 - jQuery Prototype Pollution","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-591-jquery-prototype-pollution","description":"Improperly Controlled Modification of Object Prototype Attributes (&#039;Prototype Pollution&#039;) in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"0b07a95dd33b7342ca98c378c726dab413282a0f","name":"WordPress Core &lt; 5.8.2 - ca-bundle.crt contains expired certificate DST Root CA X3","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-582-ca-bundlecrt-contains-expired-certificate-dst-root-ca-x3","description":"WordPress Core in various versions less than version 5.8.2 contained an expired DST Root CA X3 certificate. There is no significant security risk to most WordPress users.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2020-8203","name":"CVE-2020-8203","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2020-8203","description":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.","date":"2020-07-15"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:H\/PR:N\/UI:N\/S:U\/C:N\/I:H\/A:H","av":"n","ac":"h","pr":"n","ui":"n","s":"u","c":"n","i":"h","a":"h","score":"7.4","severity":"h","exploitable":"2.2","impact":"5.2"},"cwe":[{"cwe":"CWE-1321","name":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","description":"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."}]}},{"name":"3.9.40","description":null,"source":[{"id":"0abdb7e3d5c947a4e592fc7ffbb9db008973d9e1","name":"WordPress Core &lt; 5.8.1 - LoDash Update","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-581-lodash-update","description":"WordPress Core is vulnerable to prototype pollution in various versions less than 5.8.1 due to a vulnerability in the LoDash component which is identified as CVE-2020-8203.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2021-29476","name":"CVE-2021-29476","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-29476","description":"Requests is a HTTP library written in PHP. Requests mishandles deserialization in FilteredIterator. The issue has been patched and users of `Requests` 1.6.0, 1.6.1 and 1.7.0 should update to version 1.8.0.","date":"2021-04-27"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"9.8","severity":"c","exploitable":"3.9","impact":"5.9"},"cwe":[{"cwe":"CWE-502","name":"Deserialization of Untrusted Data","description":"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid."}]}},{"name":"3.9.40","description":null,"source":[{"id":"4b7797f7bcd3f13feca6a5feebb4858bf92ecca8","name":"WordPress Core &lt; 5.5.3 - PHP Object Injection Gadget","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-553-php-object-injection-gadget","description":"Requests is a HTTP library written in PHP. Requests mishandles deserialization in FilteredIterator. The issue has been patched and users of `Requests` 1.6.0, 1.6.1 and 1.7.0 should update to version 1.8.0.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2017-8295","name":"CVE-2017-8295","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2017-8295","description":"WordPress through 4.7.4 relies on the Host HTTP header for a password-reset e-mail message, which makes it easier for remote attackers to reset arbitrary passwords by making a crafted wp-login.php?action=lostpassword request and then arranging for this message to bounce or be resent, leading to transmission of the reset key to a mailbox on an attacker-controlled SMTP server. This is related to problematic use of the SERVER_NAME variable in wp-includes\/pluggable.php in conjunction with the PHP mail function. Exploitation is not achievable in all cases because it requires at least one of the following: (1) the attacker can prevent the victim from receiving any e-mail messages for an extended period of time (such as 5 days), (2) the victim's e-mail system sends an autoresponse containing the original message, or (3) the victim manually composes a reply containing the original message.","date":"2017-05-04"}],"impact":{"cvss":{"version":"3.0","vector":"CVSS:3.0\/AV:N\/AC:H\/PR:N\/UI:N\/S:U\/C:N\/I:H\/A:N","av":"n","ac":"h","pr":"n","ui":"n","s":"u","c":"n","i":"h","a":"n","score":"5.9","severity":"m","exploitable":"2.2","impact":"3.6"},"cwe":[{"cwe":"CWE-640","name":"Weak Password Recovery Mechanism for Forgotten Password","description":"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak."}]}},{"name":"3.9.40","description":null,"source":[{"id":"7d9386037f2ade251ba2e0ae50859b4460c93c72","name":"Wordpress Core &lt;= 4.7.4 - Unauthorized Password Reset","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-474-unauthorized-password-reset","description":"WordPress through 4.7.4 relies on the Host HTTP header for a password-reset e-mail message, which makes it easier for remote attackers to reset arbitrary passwords by making a crafted wp-login.php?action=lostpassword request and then arranging for this message to bounce or be resent, leading to transmission of the reset key to a mailbox on an attacker-controlled SMTP server. This is related to problematic use of the SERVER_NAME variable in wp-includes\/pluggable.php in conjunction with the PHP mail function. Exploitation is not achievable in all cases because it requires at least one of the following: (1) the attacker can prevent the victim from receiving any e-mail messages for an extended period of time (such as 5 days), (2) the victim&#039;s e-mail system sends an autoresponse containing the original message, or (3) the victim manually composes a reply containing the original message.","date":null}],"impact":[]},{"name":"3.9.40","description":null,"source":[{"id":"CVE-2022-3590","name":"CVE-2022-3590","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-3590","description":"WordPress is affected by an unauthenticated blind SSRF in the pingback feature. Because of a TOCTOU race condition between the validation checks and the HTTP request, attackers can reach internal hosts that are explicitly forbidden.","date":"2022-12-14"}],"impact":[]}]},"updated":"1680760633"}