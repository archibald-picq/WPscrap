{"error":0,"message":null,"data":{"core":"5.7","link":null,"vulnerability":[{"name":"5.7","description":null,"source":[{"id":"CVE-2022-21661","name":"CVE-2022-21661","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-21661","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Due to improper sanitization in WP_Query, there can be cases where SQL injection is possible through plugins or themes that use it in a certain way. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this vulnerability.","date":"2022-01-06"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:N\/A:N","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"h","i":"n","a":"n","score":"7.5","severity":"h","exploitable":"3.9","impact":"3.6"},"cwe":[{"cwe":"CWE-89","name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","description":"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."}]}},{"name":"5.7","description":null,"source":[{"id":"1e6059508b86a984eb6263acda6267324322bc52","name":"WordPress <= 5.8.2 - SQL Injection (SQLi) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-8-2-sql-injection-sqli-vulnerability","description":"SQL Injection (SQLi) vulnerability discovered by Ngocnb and Khuyenn (GiaoHangTietKiem JSC) in WordPress (versions <= 5.8.2).","date":"2022-01-06"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"b55ca2af08f1a22079952a7f589ea099e4207e34","name":"WordPress Core &lt; 5.8.3 - SQL Injection via WP_Query","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-583-sql-injection-via-wp-query","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Due to improper sanitization in WP_Query, there can be cases where SQL injection is possible through plugins or themes that use it in a certain way. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this vulnerability.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-21662","name":"CVE-2022-21662","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-21662","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Low-privileged authenticated users (like author) in WordPress core are able to execute JavaScript\/perform stored XSS attack, which can affect high-privileged users. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":"2022-01-06"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"l","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"5.4","severity":"m","exploitable":"2.3","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"5.7","description":null,"source":[{"id":"498d2fc950e87cecd4957229e8c39b6748a7d447","name":"WordPress <= 5.8.2 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-8-2-stored-cross-site-scripting-xss-vulnerability","description":"Stored Cross-Site Scripting (XSS) vulnerability discovered by Karim El Ouerghemmi and Simon Scannell (SonarSource) in WordPress (versions <= 5.8.2).","date":"2022-01-06"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"7c5b158115d5b44f009b67ba2ba886396673e2d8","name":"WordPress Core &lt; 5.8.3 - Authenticated (Author+) Stored Cross Site Scripting","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-583-authenticated-author-stored-cross-site-scripting","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Low-privileged authenticated users (like author) in WordPress core are able to execute JavaScript\/perform stored XSS attack, which can affect high-privileged users. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-21663","name":"CVE-2022-21663","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-21663","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. On a multisite, users with Super Admin role can bypass explicit\/additional hardening under certain conditions through object injection. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":"2022-01-06"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:H\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"h","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"7.2","severity":"h","exploitable":"1.2","impact":"5.9"},"cwe":[{"cwe":"CWE-74","name":"Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","description":"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component."}]}},{"name":"5.7","description":null,"source":[{"id":"c506e936c0764c2b594ead9142034e5ac375e153","name":"WordPress <= 5.8.2 - Authenticated Object Injection in Multisites","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-8-2-authenticated-object-injection-in-multisites","description":"Authenticated Object Injection in Multisites discovered by Simon Scannell (SonarSource) in WordPress (versions <= 5.8.2).","date":"2022-01-06"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"84b551b6d5cdcfc6bdc0bc96c42dc968e5de4d79","name":"WordPress Core &lt; 5.8.3 - Super Admin Multi-Site Installation Object Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-583-super-admin-multi-site-installation-object-injection","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. On a multisite, users with Super Admin role can bypass explicit\/additional hardening under certain conditions through object injection. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-21664","name":"CVE-2022-21664","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-21664","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Due to lack of proper sanitization in one of the classes, there's potential for unintended SQL queries to be executed. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 4.1.34. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":"2022-01-06"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"l","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"8.8","severity":"h","exploitable":"2.8","impact":"5.9"},"cwe":[{"cwe":"CWE-89","name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","description":"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."}]}},{"name":"5.7","description":null,"source":[{"id":"457926504f91079d556a15b8607e1a260490f591","name":"WordPress <= 5.8.2 - SQL Injection (SQLi) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-8-2-sql-injection-sqli-vulnerability-1","description":"SQL Injection (SQLi) vulnerability discovered by Ben Bidner in WordPress (versions <= 5.8.2).","date":"2022-01-06"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"308a822fe2713b581cddc7626be354f4b3fae4c0","name":"WordPress Core &lt; 5.8.3 - SQL Injection via WP_Meta_Query","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-583-sql-injection-via-wp-meta-query","description":"WordPress is a free and open-source content management system written in PHP and paired with a MariaDB database. Due to lack of proper sanitization in one of the classes, there&#039;s potential for unintended SQL queries to be executed. This has been patched in WordPress version 5.8.3. Older affected versions are also fixed via security release, that go back till 4.1.34. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-44223","name":"CVE-2021-44223","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-44223","description":"WordPress before 5.8 lacks support for the Update URI plugin header. This makes it easier for remote attackers to execute arbitrary code via a supply-chain attack against WordPress installations that use any plugin for which the slug satisfies the naming constraints of the WordPress.org Plugin Directory but is not yet present in that directory.","date":"2021-11-25"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"9.8","severity":"c","exploitable":"3.9","impact":"5.9"}}},{"name":"5.7","description":null,"source":[{"id":"6b66eb739eb6732a004e94f9d84fa03fb7a1a8b0","name":"WordPress <= 5.7.4 - Plugin Confusion vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-7-4-plugin-confusion-vulnerability","description":"Plugin Confusion vulnerability discovered by Kamil Vavra in WordPress (versions <= 5.7.4).","date":"2021-11-25"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"65f555a127f96ec9fcad71b39105e108dddc1262","name":"WordPress Core &lt; 5.8 - Dependency Confusion","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-58-dependency-confusion","description":"WordPress before 5.8 lacks support for the Update URI plugin header. This makes it easier for remote attackers to execute arbitrary code via a supply-chain attack against WordPress installations that use any plugin for which the slug satisfies the naming constraints of the WordPress.org Plugin Directory but is not yet present in that directory.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-39200","name":"CVE-2021-39200","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-39200","description":"WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. In affected versions output data of the function wp_die() can be leaked under certain conditions, which can include data like nonces. It can then be used to perform actions on your behalf. This has been patched in WordPress 5.8.1, along with any older affected versions via minor releases. It's strongly recommended that you keep auto-updates enabled to receive the fix.","date":"2021-09-09"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:H\/PR:L\/UI:N\/S:U\/C:H\/I:N\/A:N","av":"n","ac":"h","pr":"l","ui":"n","s":"u","c":"h","i":"n","a":"n","score":"5.3","severity":"m","exploitable":"1.6","impact":"3.6"},"cwe":[{"cwe":"CWE-200","name":"Exposure of Sensitive Information to an Unauthorized Actor","description":"The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information."}]}},{"name":"5.7","description":null,"source":[{"id":"d86eda6f1ba5b131acba882d4007af71a8b95ffd","name":"WordPress core <= 5.8 - Data Exposure via REST API vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-5-8-data-exposure-via-rest-api-vulnerability","description":"Data Exposure via REST API vulnerability discovered by Michael Adams in WordPress core (versions <= 5.8).\r\n\r\nVersion update list: 5.8 updated to 5.8.1, 5.7.2 updated to 5.7.3, 5.7.1 updated to 5.7.3, 5.7 updated to 5.7.3, 5.6.4 updated to 5.6.5, 5.6.3 updated to 5.6.5, 5.6.2 updated to 5.6.5, 5.6.1 updated to 5.6.5, 5.6 updated to 5.6.5, 5.5.5 updated to 5.5.6, 5.5.4 updated to 5.5.6, 5.5.3 updated to 5.5.6, 5.5.2 updated to 5.5.6, 5.5.1 updated to 5.5.6, 5.5 updated to 5.5.6, 5.4.6 updated to 5.4.7, 5.4.5 updated to 5.4.7, 5.4.4 updated to 5.4.7, 5.4.3 updated to 5.4.7, 5.4.2 updated to 5.4.7, 5.4.1 updated to 5.4.7, 5.4 updated to 5.4.7","date":"2021-09-09"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"21e6d553b31d3c883d1b15d3737a9b4fc4d70fcd","name":"WordPress Core 5.4 - 5.8 - Sensitive Information Disclosure","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-54-58-sensitive-information-disclosure","description":"WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. In affected versions output data of the function wp_die() can be leaked under certain conditions, which can include data like nonces. It can then be used to perform actions on your behalf. This has been patched in WordPress 5.8.1, along with any older affected versions via minor releases. It&#039;s strongly recommended that you keep auto-updates enabled to receive the fix.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-39201","name":"CVE-2021-39201","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-39201","description":"WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. ### Impact The issue allows an authenticated but low-privileged user (like contributor\/author) to execute XSS in the editor. This bypasses the restrictions imposed on users who do not have the permission to post `unfiltered_html`. ### Patches This has been patched in WordPress 5.8, and will be pushed to older versions via minor releases (automatic updates). It's strongly recommended that you keep auto-updates enabled to receive the fix. ### References https:\/\/wordpress.org\/news\/category\/releases\/ https:\/\/hackerone.com\/reports\/1142140 ### For more information If you have any questions or comments about this advisory: * Open an issue in [HackerOne](https:\/\/hackerone.com\/wordpress)","date":"2021-09-09"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"l","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"5.4","severity":"m","exploitable":"2.3","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"5.7","description":null,"source":[{"id":"f1fcc5a6d8b9a01e5890ce46fb5602d88e7d372c","name":"WordPress core <= 5.8 - Authenticated Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-5-8-authenticated-cross-site-scripting-xss-vulnerability","description":"Authenticated Cross-Site Scripting (XSS) vulnerability discovered by Michal Bentkowski (Securitum) in WordPress core block editor (versions <= 5.8).\r\n\r\nThe issue allows an authenticated but low-privileged user (like contributor\/author) to execute XSS in the editor. This bypasses the restrictions imposed on users who do not have permission to post unfiltered_html.\r\n\r\nVersion update list: 5.8 updated to 5.8.1, 5.7.2 updated to 5.7.3, 5.7.1 updated to 5.7.3, 5.7 updated to 5.7.3, 5.6.4 updated to 5.6.5, 5.6.3 updated to 5.6.5, 5.6.2 updated to 5.6.5, 5.6.1 updated to 5.6.5, 5.6 updated to 5.6.5, 5.5.5 updated to 5.5.6, 5.5.4 updated to 5.5.6, 5.5.3 updated to 5.5.6, 5.5.2 updated to 5.5.6, 5.5.1 updated to 5.5.6, 5.5 updated to 5.5.6, 5.4.6 updated to 5.4.7, 5.4.5 updated to 5.4.7, 5.4.4 updated to 5.4.7, 5.4.3 updated to 5.4.7, 5.4.2 updated to 5.4.7, 5.4.1 updated to 5.4.7, 5.4 updated to 5.4.7","date":"2021-09-09"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"2d3f2b8aed3b64fce57dfd3444252e95d3fc89d8","name":"WordPress Core 5.4 - 5.8 - Authenticated Stored Cross-Site Scripting","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-54-58-authenticated-stored-cross-site-scripting","description":"WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. ### Impact The issue allows an authenticated but low-privileged user (like contributor\/author) to execute XSS in the editor. This bypasses the restrictions imposed on users who do not have the permission to post `unfiltered_html`. ### Patches This has been patched in WordPress 5.8, and will be pushed to older versions via minor releases (automatic updates). It&#039;s strongly recommended that you keep auto-updates enabled to receive the fix. ### References https:\/\/wordpress.org\/news\/category\/releases\/ https:\/\/hackerone.com\/reports\/1142140 ### For more information If you have any questions or comments about this advisory: * Open an issue in [HackerOne](https:\/\/hackerone.com\/wordpress)","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-29447","name":"CVE-2021-29447","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-29447","description":"Wordpress is an open source CMS. A user with the ability to upload files (like an Author) can exploit an XML parsing issue in the Media Library leading to XXE attacks. This requires WordPress installation to be using PHP 8. Access to internal files is possible in a successful XXE attack. This has been patched in WordPress version 5.7.1, along with the older affected versions via a minor release. We strongly recommend you keep auto-updates enabled.","date":"2021-04-15"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:N\/S:U\/C:H\/I:N\/A:N","av":"n","ac":"l","pr":"l","ui":"n","s":"u","c":"h","i":"n","a":"n","score":"6.5","severity":"m","exploitable":"2.8","impact":"3.6"},"cwe":[{"cwe":"CWE-611","name":"Improper Restriction of XML External Entity Reference","description":"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."}]}},{"name":"5.7","description":null,"source":[{"id":"d6284ecdc71c05342975e8cce662810e559e73bb","name":"WordPress core 4.7-5.7 - XML External Entity (XXE) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-4-7-5-7-xml-external-entity-xxe-vulnerability","description":"XML External Entity (XXE) vulnerability discovered by SonarSource in WordPress core (versions 4.7-5.7)","date":"2021-04-15"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"26009ada2c34def247a0793441d9d941c89947b6","name":"WordPress Core &lt; 5.7.1 - XXE Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-571-xxe-injection","description":"Wordpress is an open source CMS. A user with the ability to upload files (like an Author) can exploit an XML parsing issue in the Media Library leading to XXE attacks. This requires WordPress installation to be using PHP 8. Access to internal files is possible in a successful XXE attack. This has been patched in WordPress version 5.7.1, along with the older affected versions via a minor release. We strongly recommend you keep auto-updates enabled.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-29450","name":"CVE-2021-29450","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-29450","description":"Wordpress is an open source CMS. One of the blocks in the WordPress editor can be exploited in a way that exposes password-protected posts and pages. This requires at least contributor privileges. This has been patched in WordPress 5.7.1, along with the older affected versions via minor releases. It's strongly recommended that you keep auto-updates enabled to receive the fix.","date":"2021-04-15"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:N\/S:U\/C:L\/I:N\/A:N","av":"n","ac":"l","pr":"l","ui":"n","s":"u","c":"l","i":"n","a":"n","score":"4.3","severity":"m","exploitable":"2.8","impact":"1.4"},"cwe":[{"cwe":"CWE-200","name":"Exposure of Sensitive Information to an Unauthorized Actor","description":"The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information."}]}},{"name":"5.7","description":null,"source":[{"id":"8ee321a868adf4b303b572d217c21d15cf773bb2","name":"WordPress Core &lt; 5.7.1 - Sensitive Information Disclosure","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-571-sensitive-information-disclosure","description":"Wordpress is an open source CMS. One of the blocks in the WordPress editor can be exploited in a way that exposes password-protected posts and pages. This requires at least contributor privileges. This has been patched in WordPress 5.7.1, along with the older affected versions via minor releases. It&#039;s strongly recommended that you keep auto-updates enabled to receive the fix.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"1978c6439d4ffbda7fe77056944c54b474d60ff0","name":"WordPress <= 5.9.1 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-9-1-stored-cross-site-scripting-xss-vulnerability","description":"Stored Cross-Site Scripting (XSS) vulnerability discovered by Ben Bidner in WordPress (versions <= 5.9.1).","date":"2022-03-11"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"2bbe5c72a57fb5f3e94693e6244769337422525b","name":"WordPress core <= 5.8.1 - Expired DST Root CA X3 Certificate issue","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-5-8-1-expired-dst-root-ca-x3-certificate-issue","description":"Expired DST Root CA X3 Certificate issue discovered by Bradley Taylor in WordPress core (versions <= 5.8.1).","date":"2021-11-10"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"490605922c1772788f6b0f30994c594b6d493e23","name":"WordPress core <= 5.8 - Command injection vulnerability in the Lodash library","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-5-8-command-injection-vulnerability-in-the-lodash-library","description":"Command injection vulnerability in the Lodash library in WordPress core (versions <= 5.8).\r\n\r\nVersion update list: 5.8 updated to 5.8.1, 5.7.2 updated to 5.7.3, 5.7.1 updated to 5.7.3, 5.7 updated to 5.7.3, 5.6.4 updated to 5.6.5, 5.6.3 updated to 5.6.5, 5.6.2 updated to 5.6.5, 5.6.1 updated to 5.6.5, 5.6 updated to 5.6.5, 5.5.5 updated to 5.5.6, 5.5.4 updated to 5.5.6, 5.5.3 updated to 5.5.6, 5.5.2 updated to 5.5.6, 5.5.1 updated to 5.5.6, 5.5 updated to 5.5.6, 5.4.6 updated to 5.4.7, 5.4.5 updated to 5.4.7, 5.4.4 updated to 5.4.7, 5.4.3 updated to 5.4.7, 5.4.2 updated to 5.4.7, 5.4.1 updated to 5.4.7, 5.4 updated to 5.4.7","date":"2021-09-09"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"0fa3ffc1bfd20c1f310b5592a17d14135f7e8fd4","name":"WordPress <= 5.7.1 - Object injection in PHPMailer vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-5-7-object-injection-in-phpmailer-vulnerability-cve-2020-36326","description":"Object injection in PHPMailer vulnerability discovered in WordPress (one security issue affecting WordPress versions between 3.7 and 5.7).","date":"2021-05-13"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2020-36326","name":"CVE-2020-36326","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2020-36326","description":"PHPMailer 6.1.8 through 6.4.0 allows object injection through Phar Deserialization via addAttachment with a UNC pathname. NOTE: this is similar to CVE-2018-19296, but arose because 6.1.8 fixed a functionality problem in which UNC pathnames were always considered unreadable by PHPMailer, even in safe contexts. As an unintended side effect, this fix eliminated the code that blocked addAttachment exploitation.","date":"2021-04-27"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"9.8","severity":"c","exploitable":"3.9","impact":"5.9"},"cwe":[{"cwe":"CWE-502","name":"Deserialization of Untrusted Data","description":"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid."}]}},{"name":"5.7","description":null,"source":[{"id":"ad1b26f36141d39ecc0ce9b69f34c9f0c0445b62","name":"WordPress core 4.7-5.7 - Sensitive Data Exposure vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-4-7-5-7-sensitive-data-exposure-vulnerability","description":"Sensitive Data Exposure vulnerability discovered by Mikael Korpela in WordPress core (versions 4.7-5.7).","date":"2021-04-15"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"f3b7aa9bc8b0e8c3f64bd2fb40359671b0fc09e5","name":"WordPress <= 6.0.1 - Authenticated Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-6-0-1-reflected-cross-site-scripting-xss-vulnerability","description":"Authenticated Cross-Site Scripting (XSS) vulnerability discovered by Khalilov Moe in WordPress <= 6.0.1\nUpdate the WordPress to the latest available version (at least 6.0.2 or another patched version).","date":"2022-08-31"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"f7331d6ee9602487d9421d51bbaa8d003f910b50","name":"WordPress  <= 6.0.1 - Authenticated Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-6-0-1-authenticated-stored-cross-site-scripting-xss-vulnerability","description":"Authenticated Stored Cross-Site Scripting (XSS) vulnerability discovered by John Blackbourn in WordPress (versions <= 6.0.1)\nUpdate the WordPress to the latest available version (at least 6.0.2 or another patched version).","date":"2022-08-31"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"2ec5c355e61ff7b994ccfa9ce9a87f34bf7b22f2","name":"WordPress <= 6.0.1 - Authenticated SQL Injection (SQLi) vulnerability via Link API","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-6-0-1-sql-injection-sqli-vulnerability-via-link-api","description":"Authenticated SQL Injection (SQLi) vulnerability via Link API discovered by FVD in WordPress core (versions <= 6.0.1).\nUpdate the WordPress to the latest available version (at least 6.0.2 or another patched version).","date":"2022-08-31"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"7ca7fdc97c224368112a3734c88a69d9d7c94000","name":"WordPress core <= 6.0.2 - Data Exposure vulnerability via REST API","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-data-exposure-vulnerability-via-rest-api","description":"Data Exposure vulnerability via REST API discovered by Than Taintor in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"ca4682638553f66010a18e13305731295b692a26","name":"WordPress core <= 6.0.2 - Sender\u2019s Email Address Exposure vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-sender-s-email-address-exposure-vulnerability","description":"Sender\u2019s Email Address Exposure vulnerability via wp-mail.php was discovered by Toshitsugu Yoneyama (Mitsui Bussan Secure Directions, Inc. via JPCERT) in the WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"9b32f82750891d500f0d63e3aba0555642392326","name":"WordPress core <= 6.0.2 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-stored-cross-site-scripting-xss-vulnerability","description":"Stored Cross-Site Scripting (XSS) vulnerability via wp-mail.php discovered by Toshitsugu Yoneyama (Mitsui Bussan Secure Directions, Inc. via JPCERT) in WordPress core (versions <= 6.0.2)\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"adb1960ffcbdecb10955812fd87563936cb4c166","name":"WordPress core <= 6.0.2 - Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-cross-site-scripting-xss-vulnerability-in-the-widget-block","description":"Cross-Site Scripting (XSS) vulnerability in the Widget block discovered in WordPress core (versions <= 6.0.2)\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"761a0083b5932c8e9df515c1e4ecea5f28ebace3","name":"WordPress core <= 6.0.2 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-stored-cross-site-scripting-xss-vulnerability-2","description":"Stored Cross-Site Scripting (XSS) vulnerability via Customizer discovered by Alex Concha (WordPress security team) in WordPress core (versions <= 6.0.2).\nUpdate the WordPress WordPress wordpress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"3a7544eb6007bc2de4a64e79bd36fc601cef87ba","name":"WordPress core <= 6.0.2 - Reflected Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-reflected-cross-site-scripting-xss-vulnerability","description":"Reflected Cross-Site Scripting (XSS) vulnerability via SQL Injection (SQLi) in Media Library discovered by Ben Bidner (WordPress security team) and Marc Montpas (Automattic) in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"fe7f5bd1bac786a3e5ebfe17e263c6d61e96fdd5","name":"WordPress core <= 6.0.2 - Stored Cross-Site Scripting (XSS) vulnerability in Comment editing","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-stored-cross-site-scripting-xss-vulnerability-in-comment-editing","description":"Stored Cross-Site Scripting (XSS) vulnerability in Comment editing discovered by Alex Concha (WordPress security team) in WordPress core (versions <= 6.0.2)\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"b771f01a44c736d447409970cb6d825b5d040bb7","name":"WordPress core <= 6.0.2 - Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-cross-site-scripting-xss-vulnerability-2","description":"Cross-Site Scripting (XSS) vulnerability in the Feature Image block discovered in WordPress core (versions <= 6.0.2)\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"190e68095cf326a45591fd3dd32a007f3a8765e4","name":"WordPress core <= 6.0.2 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-stored-cross-site-scripting-xss-vulnerability-4","description":"Stored Cross-Site Scripting (XSS) vulnerability in RSS Block discovered in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"8cf1a27ef6994f736713659e698410b8ba2a8056","name":"WordPress core <= 6.0.2 - Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-cross-site-scripting-xss-vulnerability","description":"Cross-Site Scripting (XSS) vulnerability in the Search block discovered by Alex Concha (WP Security team) in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"8363372e444bd3e93c9b85bbcb2ae0999dabbad9","name":"WordPress core <= 6.0.2 - SQL Injection (SQLi) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-sql-injection-sqli-vulnerability","description":"SQL Injection (SQLi) vulnerability due to improper sanitization in WP_Date_Query discovered by Michael Mazzolini in WordPress core (versions <= 6.0.2).\nUpdate the WordPress WordPress wordpress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"cbad750e62acc4e86903df33cd4e1b73d81454b1","name":"WordPress core <= 6.0.2 - Content From Multipart Emails Leak vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-content-from-multipart-emails-leak-vulnerability","description":"Content From Multipart Emails Leak vulnerability when HTML\/plaintext used discovered by Thomas Kr\u00e4ftner in WordPress core (versions <= 6.0.2).\nUpdate the WordPress WordPress wordpress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"7fb29fe75ce5d996234e74ba1d073bf366429926","name":"WordPress core <= 6.0.2 - Cross-Site Request Forgery (CSRF) vulnerability in wp-trackback.php","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-cross-site-request-forgery-csrf-vulnerability-in-wp-trackback-php","description":"Cross-Site Request Forgery (CSRF) vulnerability in wp-trackback.php discovered by Simon Scannell in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"99b696e0ecdb0f6d3a64b1a413467fd11dd6e763","name":"WordPress core <= 6.0.2 - Stored Cross-Site Scripting (XSS) vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpress-core-6-0-2-stored-cross-site-scripting-xss-vulnerability-3","description":"Stored Cross-Site Scripting (XSS) vulnerability in RSS Widget discovered in WordPress core (versions <= 6.0.2).\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"41e27e626f6edf652a6b9204bc05564d210ebdac","name":"WordPress core <= 6.0.2 - Open redirect vulnerability","link":"https:\/\/patchstack.com\/database\/vulnerability\/wordpress\/wordpres-core-6-0-2-open-redirect-vulnerability","description":"Open redirect vulnerability in wp_nonce_ays discovered by devrayn in WordPress core (versions <= 6.0.2)\nUpdate the WordPress to the latest available version (at least 6.0.3).","date":"2022-10-18"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"JVNDB-2022-000087","name":"Multiple vulnerabilities in WordPress","link":"http:\/\/jvndb.jvn.jp\/jvndb\/JVNDB-2022-000087","description":"WordPress contains multiple vulnerabilities listed below which are to the WordPress Post by Email Feature. <ul><li>Stored Cross-site scripting (CWE-79) - CVE-2022-43497<\/li><li>Stored Cross-site scripting (CWE-79) - CVE-2022-43500<\/li><li>Improper authentication (CWE-287) - CVE-2022-43504<\/li><\/ul> Toshitsugu Yoneyama of Mitsui Bussan Secure Directions, Inc. reported these vulnerabilities to IPA. JPCERT\/CC coordinated with the developer under Information Security Early Warning Partnership.\n\nSolution: [Update the Software] Update to the latest version according to the information provided by the developer. According to the developer, these vulnerabilities have been fixed in version 6.0.3.","date":"2022-11-08"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-43504","name":"CVE-2022-43504","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43504","description":"Improper authentication vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to obtain the email address of the user who posted a blog using the WordPress Post by Email Feature. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:L\/I:N\/A:N","av":"n","ac":"l","pr":"n","ui":"n","s":"u","c":"l","i":"n","a":"n","score":"5.3","severity":"m","exploitable":"3.9","impact":"1.4"},"cwe":[{"cwe":"CWE-287","name":"Improper Authentication","description":"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct."}]}},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-43500","name":"CVE-2022-43500","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43500","description":"Cross-site scripting vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to inject an arbitrary script. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"n","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"6.1","severity":"m","exploitable":"2.8","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-43497","name":"CVE-2022-43497","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-43497","description":"Cross-site scripting vulnerability in WordPress versions prior to 6.0.3 allows a remote unauthenticated attacker to inject an arbitrary script. The developer also provides new patched releases for all versions since 3.7.","date":"2023-02-02"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:R\/S:C\/C:L\/I:L\/A:N","av":"n","ac":"l","pr":"n","ui":"r","s":"c","c":"l","i":"l","a":"n","score":"6.1","severity":"m","exploitable":"2.8","impact":"2.7"},"cwe":[{"cwe":"CWE-79","name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."}]}},{"name":"5.7","description":null,"source":[{"id":"78cb0ca6db616fea2d602146ff644e60b6f952a9","name":"WordPress Core &lt; 6.0.3 - Shared User Instance Weakness","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-shared-user-instance-weakness","description":"WordPress Core in versions up to 6.0.3 had a weakness in how Share User Instances were handled. This fix appears to have been necessary to safely use the wp_set_current_user( 0 ); method to patch the previously mentioned XSS and CSRF in wp-mail.php and wp-trackback.php vulnerabilities. The previous functionality may have resulted in third party plugins or themes using the wp_set_current_user function in a way that could lead to privilege escalation and users being able to perform more actions than originally intended.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"2e4c185cddfe91117267695bf876b39f965ae54c","name":"WordPress Core &lt; 6.0.3 - Open Redirect","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-open-redirect","description":"WordPress Core is vulnerable to open redirect in versions up to 6.0.3. This is due to insufficient validation of the &#039;Referer&#039; header and _wp_http_referer request parameter when a user accesses a link with an expired or invalid nonce. This would make it possible for an attacker to redirect a victim to a potentially malicious site, granted they could trick the victim into performing an action such as clicking on a link.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"190fc0bb9fef5e631087ea153589b8a8a6f90960","name":"WordPress Core &lt; 6.0.3 - Information Disclosure (Multi-Part Email Leak)","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-information-disclosure-multi-part-email-leak","description":"WordPress Core is vulnerable to information disclosure via a REST-API endpoint in versions up to 6.0.3. The endpoint for terms and tags did not perform enough validation on the user requesting information about terms and tags for a given post. This made it possible for users with access to terms and tags, such as a contributor, to determine those details on all posts not belonging to them, even when in a private status. This does not reveal critical information, and as such it is not likely to be exploited.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"965a319b01a13c6eead339996178eb24e2e0d491","name":"WordPress Core &lt; 6.0.3 - Authenticated (Admin+) Stored Cross-Site Scripting via Customizer","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-admin-stored-cross-site-scripting-via-customizer","description":"WordPress Core is vulnerable to Stored Cross-Site Scripting via the Customizer in versions up to 6.0.3. This is due to insufficient escaping on the &#039;Blog Name&#039; value that could be edited and become executable with the right payload while in the theme customizer. This would make it possible for authenticated attacker with access to customize a theme, such as administrators to inject malicious JavaScript into the page.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"c9323f64fe9af6b7bd7edb0c979a9855fb13e098","name":"WordPress Core &lt; 6.0.3 - Authenticated Information Disclosure via REST-API","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-information-disclosure-via-rest-api","description":"WordPress Core is vulnerable to information disclosure via the REST-API in versions up to 6.0.3. The REST API endpoint for terms and tags did not perform enough validation on the user requesting information about terms and tags for a given post. This made it possible for users with access to terms and tags, such as a contributor, to determine those details on all posts not belonging to them, even when in a private status. This does not reveal critical information.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"63b392aea1c1b4bc1361601b817a44bafe763b06","name":"WordPress Core &lt; 6.0.3 - Reflected Cross-Site Scripting via SQL Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-reflected-cross-site-scripting-via-sql-injection","description":"WordPress Core is vulnerable to SQL Injection in the Media Library that can be leveraged to exploit a Reflected Cross-Site Scripting issue in versions up to 6.0.3. This is due to insufficient escaping on user supplied values passed to a SQL query.  This makes it possible for an attacker to achieved JavaScript code execution in a victims browser, granted they can trick the victim into performing an action such as clicking on a link.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"9ee0cd84d77b81697234ae7dc17da7bdc5cf4e78","name":"WordPress Core &lt; 6.0.3 - Cross-Site Request Forgery via wp-trackback.php","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-cross-site-request-forgery-via-wp-trackbackphp","description":"WordPress Core is vulnerable to Cross-Site Request Forgery via wp-trackback.php in versions up to 6.0.3. This is due to the fact that the any request to wp-trackback.php would assume the identity of the user whose cookies are sent with the request. This would make it possible for an unauthenticated user to trigger a trackback assuming the identity of another user, granted they could trick that other user into performing the action. In new versions of WordPress, the identity will always be a non-existent user with the ID of 0, which represents an unauthenticated user.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"9abbc1eef7432ddae819cebac05eda27f8968cb7","name":"WordPress Core &lt; 6.0.3 - Information Disclosure (Email Address)","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-information-disclosure-email-address","description":"WordPress Core is vulnerable to Information Disclosure of in versions up to 6.0.3. When the post by email functionality is enabled, it may log post author&#039;s email addresses in a way that may be publicly accessible. This could make it possible for attackers to steal post author&#039;s email addresses and use that for further attacks.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"c090fb8976cdf06fe4a784b26e31a994810574e6","name":"WordPress Core &lt; 6.0.3 - Authenticated (Editor+) Stored Cross-Site Scripting via Comments","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-authenticated-editor-stored-cross-site-scripting-via-comments","description":"WordPress Core is vulnerable to Stored Cross-Site Scripting, exploitable during comment editing, in versions up to 6.0.3. This is due to insufficient escaping and sanitization on the values being stored during a comment update. This makes it possible for authenticated users with high level permissions, such as an editor, to modify post comments to include malicious web scripts that will execute whenever someone accesses the comment.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"3125d7e18248788cbd9188f71d414ec4bb93250e","name":"WordPress Core &lt; 6.0.3 - SQL Injection via WP_Date_Query","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-603-sql-injection-via-wp-date-query","description":"WordPress Core is vulnerable to SQL Injection in versions up to 6.0.3. This is due to insufficient escaping on where &ldquo;AND&rdquo; and &ldquo;OR&rdquo; present in the query. This may make it possible for attackers to achieve SQL Injection when another plugin or theme is installed on the site that allows WP_Date_Query to be used insecurely.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"444b0c4cd5f7625ac90487b84c538374100a3f9e","name":"WordPress Core &lt; 6.0.2 - Authenticated SQL Injection","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-authenticated-sql-injection","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to SQL Injection that can be exploited by authenticated users via the LIMIT parameter passed through the get_bookmarks function. This can be exploited on default WordPress installations by users with high-level privileges, such as an editor or administrator, and it may be possible for this to be exploited by lower-privileged users if a plugin\/theme passes an unescaped user supplied LIMIT value from those level users to the get_bookmarks function.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"6d4e711f6c8b6ee331f0b1e73a4a2bd0e0ae11d2","name":"WordPress Core &lt; 6.0.2 - Stored Cross-Site Scripting via Plugin Deactivation and Deletion Errors","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-stored-cross-site-scripting-via-plugin-deactivation-and-deletion-errors","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to Stored Cross-Site Scripting that can be exploited when malicious content is injected into plugin code that triggers when an error occurs during plugin de-activation or during deletion. This requires an attacker have access to the modify the error message that is displayed either in the plugin&#039;s code or via a request parameter, in most cases it is likely to be the latter.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"ff2eea71b936176aa8dfa6a17182149fc32c1dac","name":"WordPress Core &lt; 6.0.2 - Authenticated (Contributor+) Stored Cross-Site Scripting via use of the_meta(); function","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-602-authenticated-contributor-stored-cross-site-scripting-via-use-of-the-meta-function","description":"WordPress Core, in versions up to 6.0.2, is vulnerable to Authenticated Stored Cross-Site Scripting that can be exploited by users with access to the WordPress post and page editor, typically consisting of Authors, Contributors, and Editors making it possible to inject arbitrary web scripts into posts and pages that execute if the the_meta(); function is called on that page.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"f44964d4862c0c3f4c61975fa84be6aff69e1b26","name":"WordPress Core 5.9 - 5.9.1 - Authenticated (Contributor+) Stored Cross-Site Scripting","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-59-591-authenticated-contributor-stored-cross-site-scripting","description":"WordPress Core in versions 5.9 - 5.9.1 is vulnerable to Contributor+ stored Cross-Site Scripting via the double JSON encoded payloads set in the &#039;isGlobalStylesUserThemeJSON&#039; parameter which is updatable via the post editor.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-20083","name":"CVE-2021-20083","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-20083","description":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype.","date":"2021-04-23"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"l","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"8.8","severity":"h","exploitable":"2.8","impact":"5.9"},"cwe":[{"cwe":"CWE-1321","name":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","description":"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."}]}},{"name":"5.7","description":null,"source":[{"id":"d4c9b79e9b5d7710ce593a44669702750ee3e41a","name":"WordPress Core &lt; 5.9.1 - jQuery Prototype Pollution","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-591-jquery-prototype-pollution","description":"Improperly Controlled Modification of Object Prototype Attributes (&#039;Prototype Pollution&#039;) in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"0b07a95dd33b7342ca98c378c726dab413282a0f","name":"WordPress Core &lt; 5.8.2 - ca-bundle.crt contains expired certificate DST Root CA X3","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-582-ca-bundlecrt-contains-expired-certificate-dst-root-ca-x3","description":"WordPress Core in various versions less than version 5.8.2 contained an expired DST Root CA X3 certificate. There is no significant security risk to most WordPress users.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2020-8203","name":"CVE-2020-8203","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2020-8203","description":"Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.","date":"2020-07-15"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:H\/PR:N\/UI:N\/S:U\/C:N\/I:H\/A:H","av":"n","ac":"h","pr":"n","ui":"n","s":"u","c":"n","i":"h","a":"h","score":"7.4","severity":"h","exploitable":"2.2","impact":"5.2"},"cwe":[{"cwe":"CWE-1321","name":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","description":"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."}]}},{"name":"5.7","description":null,"source":[{"id":"0abdb7e3d5c947a4e592fc7ffbb9db008973d9e1","name":"WordPress Core &lt; 5.8.1 - LoDash Update","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-581-lodash-update","description":"WordPress Core is vulnerable to prototype pollution in various versions less than 5.8.1 due to a vulnerability in the LoDash component which is identified as CVE-2020-8203.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2021-23337","name":"CVE-2021-23337","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2021-23337","description":"Lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function.","date":"2021-02-15"}],"impact":{"cvss":{"version":"3.1","vector":"CVSS:3.1\/AV:N\/AC:L\/PR:H\/UI:N\/S:U\/C:H\/I:H\/A:H","av":"n","ac":"l","pr":"h","ui":"n","s":"u","c":"h","i":"h","a":"h","score":"7.2","severity":"h","exploitable":"1.2","impact":"5.9"},"cwe":[{"cwe":"CWE-94","name":"Improper Control of Generation of Code ('Code Injection')","description":"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment."}]}},{"name":"5.7","description":null,"source":[{"id":"CVE-2022-3590","name":"CVE-2022-3590","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2022-3590","description":"WordPress is affected by an unauthenticated blind SSRF in the pingback feature. Because of a TOCTOU race condition between the validation checks and the HTTP request, attackers can reach internal hosts that are explicitly forbidden.","date":"2022-12-14"}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"1a4eda6bf228066df200968ba5b74b0c8e73621a","name":"WordPress Core &lt; 6.2.1 - Cross-Site Request Forgery","link":"https:\/\/www.wordfence.com\/threat-intel\/vulnerabilities\/wordpress-core\/wordpress-core-621-cross-site-request-forgery","description":"WordPress Core is vulnerable to Cross-Site Request Forgery due to missing nonce validation on the &lsquo;wp_ajax_set_attachment_thumbnail&rsquo; AJAX function in versions up to, and including, 6.2. This allows unauthenticated users to update the thumbnail image associated with existing attachments, granted they can trick an authenticated user with appropriate permissions into performing an action, such as clicking a link. The impact of this vulnerability is incredibly minimal.","date":null}],"impact":[]},{"name":"5.7","description":null,"source":[{"id":"CVE-2023-2745","name":"CVE-2023-2745","link":"https:\/\/www.cve.org\/CVERecord?id=CVE-2023-2745","description":"WordPress Core is vulnerable to Directory Traversal in versions up to, and including, 6.2, via the \u2018wp_lang\u2019 parameter. This allows unauthenticated attackers to access and load arbitrary translation files. In cases where an attacker is able to upload a crafted translation file onto the site, such as via an upload form, this could be also used to perform a Cross-Site Scripting attack.","date":"2023-05-17"}],"impact":[]}]},"updated":"1684336965"}